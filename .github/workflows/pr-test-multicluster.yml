name: test multi-cluster distribution

on:
  workflow_call:
  # So we can trigger manually if needed
  workflow_dispatch:
    inputs:
      testFlags:
        description: 'Command line flags for run-test.sh'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - '--released'
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  test-multicluster:
    name: Test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4.1.1
      
      - uses: actions/setup-go@v5
        with:
          go-version: v1.20
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install

      - uses: ko-build/setup-ko@v0.6
      
      - name: Install dependencies
        run: |
          curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/main/install.sh | bash
          wget https://github.com/kubestellar/kubeflex/releases/download/v0.4.2/kubeflex_0.4.2_linux_amd64.tar.gz
          tar -xvf kubeflex_0.4.2_linux_amd64.tar.gz bin/kflex
          sudo mv bin/kflex /usr/local/bin
          rm -fr bin kubeflex_0.4.2_linux_amd64.tar.gz 

      - name: Run test
        env:
          TEST_FLAGS: ${{ github.event.inputs.testFlags }}
        run: |
          cd test/e2e/multi-cluster-deployment 
          KFLEX_DISABLE_CHATTY=true ./run-test.sh $TEST_FLAGS

      - name: show kubeconfig contexts
        if: always()
        run: kubectl config get-contexts

      - name: show pods in hosting cluster
        if: always()
        run: kubectl --context kind-kubeflex get pods -A

      - name: show kubestellar controller manager log
        if: always()
        run: kubectl --context kind-kubeflex logs -n wds1-system $(kubectl --context kind-kubeflex get pod -n wds1-system --selector=control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')

      - name: show bindingpolicies
        if: always()
        run: kubectl --context wds1 get bindingpolicies.control.kubestellar.io -o yaml

      - name: show deployments in wds1
        if: always()
        run: kubectl --context wds1 get deployments -A -o yaml

      - name: show bindings
        if: always()
        run: kubectl --context wds1 get bindings.control.kubestellar.io -o yaml

      - name: show deployments in cluster1
        if: always()
        run: kubectl --context cluster1 get deployments -A -o yaml

      - name: show deployments in cluster2
        if: always()
        run: kubectl --context cluster2 get deployments -A -o yaml

      - name: show manifestworks
        if: always()
        run: kubectl --context imbs1 get manifestworks -A -o yaml

      - name: show workstatuses
        if: always()
        run: kubectl --context imbs1 get workstatuses -A -o yaml
